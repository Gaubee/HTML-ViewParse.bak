
/*
 * View constructor
 */

function View(arg) {
	if (!(this instanceof View)) {
		return new View(arg);
	}
	this.handleNodeTree = arg;
	this._buildHandler();
	this._buildTrigger();
	_traversal(this.handleNodeTree, function(node, index, parentNode) {
		View.u[node.id] = node;
	});
	tt = this;
	return $.bind(this.create, this);
};
View.u = [];
View.prototype = {
	create: function(data) {
		this.handleNodeTree.newNode = $.DOM.clone(shadowBody);
		_traversal(this.handleNodeTree, function(node, index, parentNode) {
			if (!node.ignore) {
				node.newNode = node.node.cloneNode(false);
			}
		});
		var DOMs = []; //save newDOM  without the most top of parentNode -- change with append!!
		_traversal(this.handleNodeTree, function(node, index, parentNode) {
			if (!node.ignore && node.display) { //build DOM construction
				parentNode = node.parentNode;
				$.DOM.append(parentNode.newNode, node.newNode)
			}
			var item = {
				currentNode: node.newNode,
				triggers: [],
				viewParseNode: node
			};
			// console.log(node.type,node.id)
			$.push(DOMs, item);
			DOMs["hashid|" + node.id] = item;
		});
		$.forEach(this._handle, function(handle) {
			handle();
		});
		// console.log(this.handleNodeTree.newNode, DOMs);
		return ViewInstance(this.handleNodeTree.newNode, DOMs, this._triggers);
	},
	_handle: [],
	_triggers: {},
	_buildTrigger: function(handleNodeTree) {
		handleNodeTree = handleNodeTree || this.handleNodeTree;
		var triggers = this._triggers;
		_traversal(handleNodeTree, function(item_node, index, handleNodeTree) {
			item_node.parentNode = handleNodeTree;
			if (item_node.type === "handle") {
				var handleFun = V.triggers[item_node.handleName];
				handleFun && handleFun(item_node, index, handleNodeTree, triggers)
			}
		});
	},
	_buildHandler: function(handleNodeTree) {
		handleNodeTree = handleNodeTree || this.handleNodeTree;
		var handle = this._handle;
		_traversal(handleNodeTree, function(item_node, index, handleNodeTree) {
			// console.log(item_node, index, handleNodeTree)
			item_node.parentNode = handleNodeTree;
			if (item_node.type === "handle") {
				var handleFun = V.handles[item_node.handleName];
				handleFun && handleFun(item_node, index, handleNodeTree, handle);
			}
			// console.log(item_node);
		});
	}
};